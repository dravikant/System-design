used whenever there is a tree like structure

or object inside object

e.g. filesystem (directory has directory of file and so on)
calculator (expression has subexpression or value)


there is a leaf i.e. file in filesystem or value in an expression 

solution 

have both leaf and Composite implement the component interface also composite has object of component

public interface FileSystem {

    public void ls();
}

//leaf class

public class File implements FileSystem {
    String filename;

    public File(string filename){
        this.filename = filename
    }

    public void ls(){
        System.out.Println("file name " + fileName);
    }
}

//composite

public Directory implements FileSystem {
    String directoryname;
    List<FileSystem> filesystemlist;

    public Directory(string directoryname){
        this.directoryname = directoryname;
        this.filesystemlist = new ArrayList<FileSystem>;
    }

    public void add(FileSystem filesystemobj){
        filesystemlist.add(filesystemobj);
    }

    public void ls(){
        System.out.Println("directory name " + directoryname);

        for(filesystemobj filesystemobj : filesystemlist){
            filesystemobj.ls();
        }
    }

}

//client / main 

       Directory movieDirectory = new Directory("Movie");

        FileSystem border = new File("Border");
        movieDirectory.add(border);

       Directory comedyMovieDirectory = new Directory("ComedyMovie");
       File hulchul = new File("Hulchul");
        comedyMovieDirectory.add(hulchul);
        movieDirectory.add(comedyMovieDirectory);

        movieDirectory.ls();


Example 2

Arithmetic expression


public interface ArithmeticExpression {
    public int evaluate();
}

leaf node 

public class Number implements ArithmeticExpression {

    int value;

    public Number(int value){
        this.value = value;
    }

    public int evaluate (){
        System.out.println("Number value is :" + value);
        return value;
    }
}


//enum for operation

public enum Operation {

    ADD,
    SUBTRACT,
    MULTIPLY,
    DIVIDE;
}


//composite

public class Expression implements ArithmeticExpression{
    ArithmeticExpression leftexpression;
    ArithmeticExpression rightexpression;
    Operator operator;

    public Expression(ArithmeticExpression leftexpression, ArithmeticExpression rightexpression, Operation operator){
         this.leftExpression = leftPart;
        this.rightExpression = rightPart;
        this.operator = operator;

    }


    public int evaluate(){

           int value = 0;
        switch (operation){

            case ADD:
                value = leftExpression.evaluate() + rightExpression.evaluate();
                break;
            case SUBTRACT:
                value = leftExpression.evaluate() - rightExpression.evaluate();
                break;
            case DIVIDE:
                value = leftExpression.evaluate() / rightExpression.evaluate();
                break;
            case MULTIPLY:
                value = leftExpression.evaluate() * rightExpression.evaluate();
                break;
        }

     System.out.println("Expression value is :" + value);
        return value;

    }
}


