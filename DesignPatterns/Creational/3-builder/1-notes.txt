consider class with lot of optional fields

class Student{
    int rollno; //mandatory

    String firstname;
    String lastname;
    String fathername;
    String mothername;
    String mobileno;
    ..
    ..
}

as there are mulitple optional fields there can be multiple possible combinations of constructors 
writing each possible combination is not feasible

or 

single constructor with big list of parameter

in case of small constructor with limited parameters there can be issue due to same type of parameters


---> 

Builder design pattern is step by step object creation

stringbuilder is based on builder pattern



class Student{
    int rollno; //mandatory

    String firstname;
    String lastname;
    String fathername;
    String mothername;
    String mobileno;
    ..
    ..

    public Student(StudentBuilder sb){  --> input is StudentBuilder i.e builder object 

        this.rollNumber = builder.rollNumber;
        this.age = builder.age;
        this.name = builder.name;
        this.fatherName = builder.fatherName;
        this.motherName = builder.motherName;
        this.subjects = builder.subjects;


    }

    public String toString(){
        return ""+ " roll number: " + this.rollNumber +
                " age: " + this.age +
                " name: " + this.name +
                " father name: " + this.fatherName +
                " mother name: " + this.motherName +
                " subjects: " + subjects.get(0) + "," + subjects.get(1) + "," + subjects.get(2);
    }



}


//this builder class has all the fields --> duplication
public abstract class StudentBuilder{
    int rollNumber;
    int age;
    String name;
    String fatherName;
    String motherName;
    List<String> subjects;

    // it has only setter methods and returns builder object only

    public StudentBuilder setRollNumber(int rollNumber) {
        this.rollNumber = rollNumber;
        return this;
    }

    public StudentBuilder setAge(int age) {
        this.age = age;
        return this;
    }

    public StudentBuilder setName(String name) {
        this.name = name;
        return this;
    }

    public StudentBuilder setFatherName(String fatherName) {
        this.fatherName = fatherName;
        return this;
    }

    public StudentBuilder setMotherName(String motherName) {
        this.motherName = motherName;
        return this;
    }

    abstract public StudentBuilder setSubjects();

    //finally it will have a build method that returns the actual object

    public Student build() {
        return new Student(this);
    }



}

// and there is a last component called Director which calls these methods in particular Order

(if order is required it is enforced by Director)


Director has the builder object

public class Director{

    StudentBuilder studentBuilder;

    Director(StudentBuilder studentBuilder){
        this.studentBuilder = studentBuilder;
    }

    public createStudent(){
        if(studentBuilder instanceof EngineeringStudentBuilder){
            return createEngineeringStudent();
        }
        else if(studentBuilder instanceof MBAStudentBuilder){
            return createMBAStudent();
        }
        return null;

    }

    private Student createEngineeringStudent(){
        //if there is any order required it is captured here
        return studentBuilder.setRollNumber(1).setAge(22).setName("sj").setSubjects().build();
    }

    private Student createMBAStudent(){

        return studentBuilder.setRollNumber(2).setAge(24).setName("sj").setFatherName("MyFatherName").setMotherName("MyMotherName").setSubjects().build();

    }


}


//finally client uses the director

public class Client {

    public static void main(String args[]){

        Director directorObj1 = new Director(new EngineeringStudentBuilder());
        Director directorObj2 = new Director(new MBAStudentBuilder());

        Student engineerStudent = directorObj1.createStudent();
        Student mbaStudent =directorObj2.createStudent();

        System.out.println(engineerStudent.toString());
        System.out.println(mbaStudent.toString());

    }
}

